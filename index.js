import { openai, supabase } from "./config";

const query = "Training puppies";

const main = async (input) => {
    const embedding = await createEmbedding(input);
    const match = await findNearestMatch(embedding);

    await getChatCompletion(match, input);
};

const createEmbedding = async (input) => {
    /* Create a vector embedding representing the input text */
    const embeddingResponse = await openai.embeddings.create({
        model: "text-embedding-ada-002",
        input,
    });

    /* The vector generated by OpenAI */
    return embeddingResponse.data[0].embedding;
};

const findNearestMatch = async (embedding) => {
    /* Query supabase for nearest vector match */
    const { data } = await supabase.rpc("match_documents", {
        query_embedding: embedding,
        match_threshold: 0.5,
        match_count: 3,
    });

    return data[0].context;
};

/* User OpenAI to make the response conversational */
const chatMessages = [
    {
        role: "system",
        content:
            "You are an enthusiastic podcast expert who loves recommending podcasts to people. You will be given two pieces of information - some context about podcasts episodes and a question. Your main job is to formulate a short answer to the question using the provided context. If you are unsure and cannot find the answer in the context, say, 'Sorry, I don't know the anwser.' Please do not make up the answer.",
    },
];

const getChatCompletion = async (text, query) => {
    chatMessages.push({
        role: "user",
        content: `Context: ${text} Question: ${query}`,
    });

    const response = await openai.chat.completions.create({
        model: "gpt-4",
        messages: chatMessages,
        temperature: 0.5,
        frequency_penalty: 0.5,
    });

    console.log(response.choices[0].message.content);
};

main(query);
